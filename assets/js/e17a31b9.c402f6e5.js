"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[526],{4069:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=t(4848),r=t(8453);const a={title:"Example Demonstration",sidebar_position:15},s=void 0,o={id:"example-full",title:"Example Demonstration",description:"Automates modifying the last open order or creating a new open order with a specified PnL",source:"@site/docs/example-full.md",sourceDirName:".",slug:"/example-full",permalink:"/example-full",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:15,frontMatter:{title:"Example Demonstration",sidebar_position:15},sidebar:"tutorialSidebar",previous:{title:"Object Generators",permalink:"/object-generators"},next:{title:"Donate",permalink:"/donate"}},l={},c=[];function d(e){const n={a:"a",code:"code",img:"img",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Automates modifying the last open order or creating a new open order with a specified ",(0,i.jsx)(n.code,{children:"PnL"})]}),"\n",(0,i.jsxs)(n.p,{children:["This should be copy pasted into a new ",(0,i.jsx)(n.code,{children:"Console Project"})," in ",(0,i.jsx)(n.code,{children:"Visual Studio"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:'// Please make sure you understand before you run this example.\n// This example is solely intended to demonstrate how to use various aspects of the library.\n// I am not responsible for your usage of this functional example.\n\n// Command Line Arguments\n// MODE    - create new/add last, eg. true\n// SYMBOL  - symbol name,         eg. 1000SATSUSDT\n// ASSET   - symbol asset,        eg. 1000SATS\n// QUOTE   - quote quantity,      eg. 1 USDT\n// PERCENT - pnl percent,         eg. 0.4%\n\n// eg.\n// SimpleExample.exe true 1000SATSUSDT 1000SATS 1 0.4 // Create new with PnL Percent\n// SimpleExample.exe false 1000SATSUSDT 1000SATS 1 // Add to Last Open Order\n\nusing BinanceAPI;\nusing BinanceAPI.Authentication;\nusing BinanceAPI.Enums;\nusing BinanceAPI.Hosts;\nusing BinanceAPI.MarketData;\nusing BinanceAPI.Rest;\nusing BinanceAPI.SharedObjects;\nusing BinanceAPI.SpotData;\nusing BinanceAPI.UserData;\nusing BinanceAPI.UserStream;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\n\nnamespace FullRestExample\n{\n    internal class Program\n    {\n        private const int RECV_WINDOW = 2000;\n\n        private static decimal QuoteQunatity = 1; // eg. 1 USDT\n\n        private static decimal PnlPercent = 0.4m; // eg. 0.4%\n\n        private static string Symbol = "symbol"; // eg. 1000SATSUSDT\n\n        private static string Asset = "asset"; // eg. 1000SATS\n\n        private static RestClient RestClient = null!;\n\n        private static SocketClient SocketClient = null!;\n\n        private static UserDataUpdate UserDataUpdate = null!;\n\n        private static AuthenticationProvider AuthenticationProvider = null!;\n\n        private static CachableSpotRequest AdjustMarketOrder = null!;\n\n        private static CachableSpotRequestPartial CachableSpotRequestPartial = null!;\n\n        private static BinanceSymbol? BinanceSymbol = null!;\n\n        private static decimal QuantityStepSize;\n\n        private static byte QuantityStepSizeScale;\n\n        private static int PriceTickScale;\n\n        private static bool createNewMode = false;\n\n        private static volatile int singleEntry = 0;\n\n        public static decimal AvailableN = decimal.Zero;\n\n        private static readonly Action<BinanceStreamPositionsUpdate?> PositionUpdateAction = (message) =>\n        {\n            if (message != null)\n            {\n                foreach (var position in message.Balances)\n                {\n                    if (position.Asset == Asset)\n                    {\n                        AvailableN = position.Free.Scale(QuantityStepSizeScale);\n                    }\n                }\n            }\n\n            UserDataUpdate.Signal();\n        };\n\n        private static void Main(string[] args)\n        {\n            SetupConsole();\n\n            if (CheckArgumentsValid(args))\n            {\n                AdjustMarketOrder = CacheClientSpot.CreateOrderMarketQuote(Symbol, OrderSide.Buy, QuoteQunatity, RECV_WINDOW);\n\n                CachableSpotRequestPartial = CacheClientSpot.CreateOrderLimitPartial(Symbol, OrderSide.Sell, OrderType.Limit, RECV_WINDOW, TimeInForce.GoodTillCancel, OrderResponseType.ACK);\n\n                AuthenticationProvider = new("YOUR HMAC API KEY", "YOUR HMAC API SECRET KEY");\n\n                RestClient = new RestClient(AuthenticationProvider, RestClientOptions);\n\n                SocketClient = new SocketClient();\n\n                BinanceSymbol = RestClient.Spot.System.GetExchangeInfo(Symbol).Data?.Symbols.FirstOrDefault();\n\n                UserDataUpdate = new UserDataUpdate(SocketClient, RestClient, PositionUpdateAction);\n\n                if (BinanceSymbol != null)\n                {\n                    QuantityStepSize = BinanceSymbol.LotSizeFilter?.StepSize ?? decimal.Zero;\n\n                    QuantityStepSizeScale = new DecimalHelper(QuantityStepSize.Normalize()).Scale;\n\n                    PriceTickScale = new DecimalHelper(BinanceSymbol.PriceFilter?.TickSize.Normalize() ?? 1).Scale;\n\n                    Console.WriteLine("Server Time Ticks: " + ServerTimeClient.ServerTimeTicks);\n\n                    if (ServerTimeClient.ServerTimeTicks > 0)\n                    {\n                        Console.WriteLine("--------CLOSE APPLICATION TO STOP--------");\n\n                        WaitForInputLoop();\n                    }\n                    else\n                    {\n                        Console.WriteLine("--------NETWORK ERROR--------");\n                    }\n                }\n                else\n                {\n                    Console.WriteLine("Exchange Information Not Found for: " + Symbol);\n                }\n            }\n\n            WaitCleanupConsole();\n        }\n\n        private static void WaitForInputLoop()\n        {\n            if (createNewMode)\n            {\n                Console.WriteLine("Press any key to:\\n1. Buy [" + QuoteQunatity + " USDT] of [" + Symbol + "]\\n2. Create a new order with pnl of [" + PnlPercent + "%]");\n            }\n            else\n            {\n                Console.WriteLine("Press any key to:\\n1. Buy [" + QuoteQunatity + " USDT] of [" + Symbol + "]\\n2. Add the quantity to the last open order");\n            }\n\n            while (true)\n            {\n                Console.ReadLine();\n\n                if (Interlocked.Exchange(ref singleEntry, 1) == 0)\n                {\n                    if (!createNewMode)\n                    {\n                        ThreadPool.UnsafeQueueUserWorkItem((_) =>\n                        {\n                            RestResult<List<BinanceOrderSpot>> openOrders = RestClient.Spot.Order.GetOpenOrders(Symbol);\n\n                            if (openOrders.Data != null)\n                            {\n                                int openOrderCount = openOrders.Data.Count() - 1;\n\n                                if (openOrderCount >= 0)\n                                {\n                                    BinanceOrderSpot lastOrder = openOrders.Data.ElementAtOrDefault(openOrderCount);\n\n                                    if (lastOrder != null)\n                                    {\n                                        if (AdjustOrder(ref lastOrder))\n                                        {\n                                            Console.WriteLine("OKAY");\n\n                                            Interlocked.Exchange(ref singleEntry, 0);\n\n                                            return;\n                                        }\n                                    }\n                                }\n                            }\n\n                            Console.WriteLine("FAILED");\n\n                            Interlocked.Exchange(ref singleEntry, 0);\n                        }, null);\n                    }\n                    else\n                    {\n                        ThreadPool.UnsafeQueueUserWorkItem((_) =>\n                        {\n                            if (AddOrder())\n                            {\n                                Console.WriteLine("OKAY");\n                            }\n                            else\n                            {\n                                Console.WriteLine("FAILED");\n                            }\n\n                            Interlocked.Exchange(ref singleEntry, 0);\n                        }, null);\n                    }\n                }\n                else\n                {\n                    Console.WriteLine("Still waiting for last request");\n                }\n            }\n        }\n\n        private static bool AddOrder()\n        {\n            RestResult<BinancePlacedOrderSpot> addOrder = RestClient.Spot.Order.PlaceOrderSpot(ref AdjustMarketOrder);\n\n            if (addOrder.Data != null)\n            {\n                UserDataUpdate.WaitForUpdate();\n\n                if (AvailableN >= QuantityStepSize)\n                {\n                    string completedRequest = CachableSpotRequestPartial.Complete((addOrder.Data.Price + (addOrder.Data.Price / 100 * PnlPercent)).Scale(PriceTickScale), AvailableN);\n\n                    RestResult<BinancePlacedOrderSpot> newOrder = RestClient.Spot.Order.PlaceOrderSpot(ref completedRequest);\n\n                    if (newOrder.Data != null)\n                    {\n                        AvailableN = decimal.Zero;\n\n                        return true;\n                    }\n                    else\n                    {\n                        Error(newOrder.Error, "New Order");\n                    }\n                }\n                else\n                {\n                    Console.WriteLine("Invalid Available Amount");\n                }\n            }\n            else\n            {\n                Error(addOrder.Error, "Adjust Order");\n            }\n\n            AvailableN = decimal.Zero;\n\n            return false;\n        }\n\n        private static bool AdjustOrder(ref BinanceOrderSpot bos)\n        {\n            RestResult<BinancePlacedOrderSpot> adjustOrder = RestClient.Spot.Order.PlaceOrderSpot(ref AdjustMarketOrder);\n\n            if (adjustOrder.Data != null)\n            {\n                RestResult<BinanceCancelledId> cancelled = RestClient.Spot.Order.CancelOrder(Symbol, bos.OrderId);\n\n                if (cancelled.Data != null)\n                {\n                    UserDataUpdate.WaitForUpdate();\n\n                    if (AvailableN >= QuantityStepSize)\n                    {\n                        decimal pricePercent = bos.Price / 100 * PnlPercent;\n\n                        decimal lastPriceNegative = bos.Price - pricePercent;\n\n                        string req = CachableSpotRequestPartial.Complete((adjustOrder.Data.Price <= lastPriceNegative ? bos.Price : bos.Price + pricePercent).Scale(PriceTickScale), AvailableN);\n\n                        RestResult<BinancePlacedOrderSpot> newOrder = RestClient.Spot.Order.PlaceOrderSpot(ref req);\n\n                        if (newOrder.Data != null)\n                        {\n                            AvailableN = decimal.Zero;\n\n                            return true;\n                        }\n                        else\n                        {\n                            Error(newOrder.Error, "New Order");\n                        }\n                    }\n                    else\n                    {\n                        Console.WriteLine("Invalid Available Amount");\n                    }\n                }\n                else\n                {\n                    Error(cancelled.Error, "Cancelled");\n                }\n            }\n            else\n            {\n                Error(adjustOrder.Error, "Adjust Order");\n            }\n\n            AvailableN = decimal.Zero;\n\n            return false;\n        }\n\n        private static void Error(RestError? error, string location)\n        {\n            if (error != null)\n            {\n                if (error.Exception != null)\n                {\n                    Console.WriteLine("Exception " + location + " | " + error.Exception.Message);\n                }\n                else\n                {\n                    Console.WriteLine("Error " + location + " | " + error.ErrorMessage);\n                }\n            }\n        }\n\n        private static bool CheckArgumentsValid(string[] args)\n        {\n            bool success = false;\n\n            if (args.Length > 0)\n            {\n                if (args[0] == "true")\n                {\n                    if (args.Length == 5)\n                    {\n                        createNewMode = true;\n\n                        try\n                        {\n                            Symbol = args[1];\n\n                            Asset = args[2];\n\n                            QuoteQunatity = decimal.Parse(args[3]);\n\n                            PnlPercent = decimal.Parse(args[4]);\n\n                            success = true;\n                        }\n                        catch\n                        {\n                            success = false;\n                        }\n                    }\n                }\n                else if (args[0] == "false")\n                {\n                    if (args.Length == 4)\n                    {\n                        try\n                        {\n                            Symbol = args[1];\n\n                            Asset = args[2];\n\n                            QuoteQunatity = decimal.Parse(args[3]);\n\n                            success = true;\n                        }\n                        catch\n                        {\n                            success = false;\n                        }\n                    }\n                }\n            }\n\n            if (!success)\n            {\n                Console.WriteLine("Invalid Argument, Fix and Restart\\n\\nValid Examples:\\n\\nAdd to Last Open Order\\nSimpleExample.exe false 1000SATSUSDT 1000SATS 1\\n\\nCreate new with PnL Percent\\nSimpleExample.exe true 1000SATSUSDT 1000SATS 1 0.4");\n            }\n\n            return success;\n        }\n\n        // ---------------------------------\n\n        private static void SetupConsole()\n        {\n            Console.CursorVisible = false;\n            Console.WindowWidth = (int)(Console.LargestWindowWidth / 2.5);\n            Console.WindowHeight = (int)(Console.LargestWindowHeight / 2.5);\n        }\n\n        private static void WaitCleanupConsole()\n        {\n            Console.ReadLine();\n\n            Console.WriteLine("Cleaning up.. Please wait..");\n\n            RestClient.Dispose();\n            UserDataUpdate.Dispose();\n\n            Console.WriteLine("Press any key to exit");\n\n            Console.ReadLine();\n        }\n\n        private static readonly RestClientOptions RestClientOptions = new()\n        {\n            SyncUpdateTime = 5,\n            GetCacheSize = 2048,\n            PutCacheSize = 2048,\n            PostCacheSize = 2048,\n            DeleteCacheSize = 2048,\n            ReceiveWindow = TimeSpan.FromMilliseconds(RECV_WINDOW),\n            DefaultApiController = BinanceApiController.DEFAULT\n        };\n    }\n\n    public class UserDataUpdate\n    {\n        public volatile int Waiting = 0;\n\n        private readonly SocketClientHost SocketClientHost = null!;\n\n        public UserDataUpdate(SocketClient socketClient, RestClient restCLient, Action<BinanceStreamPositionsUpdate?> onPositionUpdate)\n        {\n            RestResult<BinanceListenKey> listenKey = restCLient.Spot.UserStream.StartUserStream();\n\n            if (listenKey.Data != null)\n            {\n                SocketClientHost = socketClient.UserDataStreams.Updates(listenKey.Data.ListenKey, null, (positionUpdate) => { onPositionUpdate(positionUpdate); });\n            }\n        }\n\n        public void Signal()\n        {\n            Interlocked.Exchange(ref Waiting, 0);\n        }\n\n        public void WaitForUpdate()\n        {\n            Interlocked.Exchange(ref Waiting, 1);\n\n            while (Waiting == 1)\n            {\n                Delay.Wait(50);\n            }\n        }\n\n        public void Dispose()\n        {\n            SocketClientHost?.Dispose();\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.nuget.org/profiles/Samuel",children:(0,i.jsx)(n.img,{src:"https://i.imgur.com/JfsfrPD.png",alt:"Copyright S Christison \xa92024"})})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(6540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);